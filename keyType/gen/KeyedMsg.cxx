// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file KeyedMsg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "KeyedMsg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

KeyedMsg::KeyedMsg()
{
    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@307f6b8c
    m_id = 0;
    // m_msg com.eprosima.idl.parser.typecode.StringTypeCode@6f195bc3
    m_msg ="";

}

KeyedMsg::~KeyedMsg()
{


}

KeyedMsg::KeyedMsg(const KeyedMsg &x)
{
    m_id = x.m_id;
    m_msg = x.m_msg;
}

KeyedMsg::KeyedMsg(KeyedMsg &&x)
{
    m_id = x.m_id;
    m_msg = std::move(x.m_msg);
}

KeyedMsg& KeyedMsg::operator=(const KeyedMsg &x)
{

    m_id = x.m_id;
    m_msg = x.m_msg;

    return *this;
}

KeyedMsg& KeyedMsg::operator=(KeyedMsg &&x)
{

    m_id = x.m_id;
    m_msg = std::move(x.m_msg);

    return *this;
}

size_t KeyedMsg::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t KeyedMsg::getCdrSerializedSize(const KeyedMsg& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.msg().size() + 1;


    return current_alignment - initial_alignment;
}

void KeyedMsg::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_id;
    scdr << m_msg;
}

void KeyedMsg::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_id;
    dcdr >> m_msg;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void KeyedMsg::id(uint32_t _id)
{
m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t KeyedMsg::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& KeyedMsg::id()
{
    return m_id;
}

/*!
 * @brief This function copies the value in member msg
 * @param _msg New value to be copied in member msg
 */
void KeyedMsg::msg(const std::string &_msg)
{
m_msg = _msg;
}

/*!
 * @brief This function moves the value in member msg
 * @param _msg New value to be moved in member msg
 */
void KeyedMsg::msg(std::string &&_msg)
{
m_msg = std::move(_msg);
}

/*!
 * @brief This function returns a constant reference to member msg
 * @return Constant reference to member msg
 */
const std::string& KeyedMsg::msg() const
{
    return m_msg;
}

/*!
 * @brief This function returns a reference to member msg
 * @return Reference to member msg
 */
std::string& KeyedMsg::msg()
{
    return m_msg;
}

size_t KeyedMsg::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


     current_align += 4 + eprosima::fastcdr::Cdr::alignment(current_align, 4);

     


    return current_align;
}

bool KeyedMsg::isKeyDefined()
{
   return true;
}

void KeyedMsg::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_id;  
	 
}
